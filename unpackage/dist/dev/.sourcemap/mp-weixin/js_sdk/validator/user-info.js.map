{"version":3,"file":"user-info.js","sources":["js_sdk/validator/user-info.js"],"sourcesContent":["// 表单校验规则由 schema2code 生成，不建议直接修改校验规则，而建议通过 schema2code 生成, 详情: https://uniapp.dcloud.net.cn/uniCloud/schema\r\nimport word_filter from './validateFunction/word_filter.js'\r\n\r\nconst validator = {\r\n  \"username\": {\r\n    \"rules\": [\r\n      {\r\n        \"format\": \"string\",\r\n        \"errorMessage\": \"只能输入中文\"\r\n      },\r\n      {\r\n        \"pattern\": \"^[\\\\u4e00-\\\\u9fa5]+$\",\r\n        \"errorMessage\": \"只能输入中文\"\r\n      }\r\n    ],\r\n    \"label\": \"真实姓名\"\r\n  },\r\n  \"gender\": {\r\n    \"rules\": [\r\n      {\r\n        \"format\": \"int\"\r\n      },\r\n      {\r\n        \"range\": [\r\n          {\r\n            \"text\": \"未知\",\r\n            \"value\": 0\r\n          },\r\n          {\r\n            \"text\": \"男\",\r\n            \"value\": 1\r\n          },\r\n          {\r\n            \"text\": \"女\",\r\n            \"value\": 2\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"defaultValue\": 0,\r\n    \"label\": \"性别\"\r\n  },\r\n  \"birth_date\": {\r\n    \"rules\": [\r\n      {\r\n        \"format\": \"timestamp\"\r\n      }\r\n    ],\r\n    \"label\": \"生日\"\r\n  },\r\n  \"weight\": {\r\n    \"rules\": [\r\n      {\r\n        \"format\": \"int\"\r\n      },\r\n      {\r\n        \"minimum\": 50,\r\n        \"maximum\": 500,\r\n        \"exclusiveMinimum\": false,\r\n        \"exclusiveMaximum\": true\r\n      }\r\n    ],\r\n    \"label\": \"体重\"\r\n  },\r\n  \"mobile\": {\r\n    \"rules\": [\r\n      {\r\n        \"format\": \"string\"\r\n      },\r\n      {\r\n        \"pattern\": \"^\\\\+?[0-9-]{3,20}$\"\r\n      }\r\n    ],\r\n    \"label\": \"手机号码\"\r\n  },\r\n  \"email\": {\r\n    \"rules\": [\r\n      {\r\n        \"format\": \"string\"\r\n      },\r\n      {\r\n        \"format\": \"email\"\r\n      }\r\n    ],\r\n    \"label\": \"邮箱账号\"\r\n  },\r\n  \"url\": {\r\n    \"rules\": [\r\n      {\r\n        \"format\": \"string\"\r\n      },\r\n      {\r\n        \"format\": \"url\"\r\n      }\r\n    ],\r\n    \"label\": \"个人博客\"\r\n  },\r\n  \"favorite_book_id\": {\r\n    \"rules\": [\r\n      {\r\n        \"format\": \"string\"\r\n      }\r\n    ],\r\n    \"label\": \"喜欢的书\"\r\n  },\r\n  \"address_code\": {\r\n    \"rules\": [\r\n      {\r\n        \"format\": \"string\"\r\n      }\r\n    ],\r\n    \"label\": \"地址\"\r\n  },\r\n  \"party_member\": {\r\n    \"rules\": [\r\n      {\r\n        \"format\": \"bool\"\r\n      }\r\n    ],\r\n    \"label\": \"是否为党员\"\r\n  },\r\n  \"hobby\": {\r\n    \"rules\": [\r\n      {\r\n        \"format\": \"array\"\r\n      },\r\n      {\r\n        \"range\": [\r\n          {\r\n            \"text\": \"唱歌\",\r\n            \"value\": \"Sing\"\r\n          },\r\n          {\r\n            \"text\": \"跳舞\",\r\n            \"value\": \"dance\"\r\n          },\r\n          {\r\n            \"text\": \"画画\",\r\n            \"value\": \"draw\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"label\": \"业余爱好\"\r\n  },\r\n  \"comment\": {\r\n    \"rules\": [\r\n      {\r\n        \"format\": \"string\"\r\n      },\r\n      {\r\n        validateFunction: word_filter\r\n      }\r\n    ],\r\n    \"label\": \"备注\"\r\n  }\r\n}\r\n\r\nconst enumConverter = {\r\n  \"gender_valuetotext\": {\r\n    \"0\": \"未知\",\r\n    \"1\": \"男\",\r\n    \"2\": \"女\"\r\n  },\r\n  \"hobby_valuetotext\": [\r\n    {\r\n      \"text\": \"唱歌\",\r\n      \"value\": \"Sing\"\r\n    },\r\n    {\r\n      \"text\": \"跳舞\",\r\n      \"value\": \"dance\"\r\n    },\r\n    {\r\n      \"text\": \"画画\",\r\n      \"value\": \"draw\"\r\n    }\r\n  ]\r\n}\r\n\r\nfunction filterToWhere(filter, command) {\r\n  let where = {}\r\n  for (let field in filter) {\r\n    let { type, value } = filter[field]\r\n    switch (type) {\r\n      case \"search\":\r\n        if (typeof value === 'string' && value.length) {\r\n          where[field] = new RegExp(value)\r\n        }\r\n        break;\r\n      case \"select\":\r\n        if (value.length) {\r\n          let selectValue = []\r\n          for (let s of value) {\r\n            selectValue.push(command.eq(s))\r\n          }\r\n          where[field] = command.or(selectValue)\r\n        }\r\n        break;\r\n      case \"range\":\r\n        if (value.length) {\r\n          let gt = value[0]\r\n          let lt = value[1]\r\n          where[field] = command.and([command.gte(gt), command.lte(lt)])\r\n        }\r\n        break;\r\n      case \"date\":\r\n        if (value.length) {\r\n          let [s, e] = value\r\n          let startDate = new Date(s)\r\n          let endDate = new Date(e)\r\n          where[field] = command.and([command.gte(startDate), command.lte(endDate)])\r\n        }\r\n        break;\r\n      case \"timestamp\":\r\n        if (value.length) {\r\n          let [startDate, endDate] = value\r\n          where[field] = command.and([command.gte(startDate), command.lte(endDate)])\r\n        }\r\n        break;\r\n    }\r\n  }\r\n  return where\r\n}\r\n\r\nexport { validator, enumConverter, filterToWhere }\r\n"],"names":["word_filter"],"mappings":"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"}